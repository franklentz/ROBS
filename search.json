[{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://franklentz.github.io/onRobs/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://franklentz.github.io/onRobs/articles/onRobs.html","id":"obs-websocket-server-in-obs","dir":"Articles","previous_headings":"","what":"OBS Websocket Server in OBS","title":"onRobs","text":"OBS must running (package tested version 29) need start websockets server. obs-websocket included default OBS Studio since version 28.0.0. Previous version relying plugin. find websocket server Tools > Websockets server Settings Make sure tick “Enable WebSockets server” check box want use authentication (strongly encouraged), also tick “Enable authentication” checkbox choose password. detailed information OBS websockets, can read obs-websocket 5.1.0 Protocol","code":""},{"path":"https://franklentz.github.io/onRobs/articles/onRobs.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"onRobs","text":"can install development version onRobs GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"franklentz/onRobs\")"},{"path":"https://franklentz.github.io/onRobs/articles/onRobs.html","id":"connection-and-identification","dir":"Articles","previous_headings":"Installation","what":"Connection and Identification","title":"onRobs","text":"three steps start interacting OBS Webserver running Create OBSWebsocket (object use interact OBS websockets server Establish connection server Identify authenticate. authentication activated OBS Websockets server, need supply password","code":"library(onRobs) myobs <- createOBSWebsocket()  connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"myObsWebsocketsServerPassword\")"},{"path":"https://franklentz.github.io/onRobs/articles/onRobs.html","id":"control-the-scenes-of-your-stream","dir":"Articles","previous_headings":"Installation","what":"Control the scenes of your stream","title":"onRobs","text":"identified, can call currently implemented functions documented reference list identified (see ), want change current scene stream, can simply call : want stop interactions OBS:","code":"# myobs is the websocket object created in the previous section # the name of the scene must exist in OBS  # Change the scene of the stream to \"BRB\" (Be Right Back) SetCurrentProgramScene(obs = myobs, sceneName  = \"BRB\")  # Change the scene of the stream to \"Muti Cam Scene\" SetCurrentProgramScene(obs = myobs, sceneName  = \"Muti Cam Scene\") disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"FML. Maintainer.","code":""},{"path":"https://franklentz.github.io/onRobs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"FML (2023). onRobs: R client obs-websocket. https://github.com/franklentz/onRobs, https://franklentz.github.io/onRobs/.","code":"@Manual{,   title = {onRobs: R client for obs-websocket},   author = {{FML}},   year = {2023},   note = {https://github.com/franklentz/onRobs, https://franklentz.github.io/onRobs/}, }"},{"path":"https://franklentz.github.io/onRobs/index.html","id":"onrobs","dir":"","previous_headings":"","what":"R client for obs-websocket","title":"R client for obs-websocket","text":"package R OBS (pronounce air OBS) enables control OBS OBS Websockets Server using R functions. strongly relies websocket package. new , check Get started page.","code":""},{"path":"https://franklentz.github.io/onRobs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R client for obs-websocket","text":"can install development version onRobs GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"franklentz/onRobs\")"},{"path":"https://franklentz.github.io/onRobs/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"R client for obs-websocket","text":"","code":"library(onRobs)  # myobs <- createOBSWebsocket()  # connectToOBS(obs = myobs) # identifyToOBS(obs = myobs, eventSub = \"33\", password = \"myObsWebsocketsServerPassword\") # CreateScene(obs = myobs, sceneName = \"New Scene\") # SetCurrentProgramScene(obs = myobs, scene = \"Muti Cam Scene\") # SetCurrentProgramScene(obs = myobs, scene = \"BRB\") # disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/CreateInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an input — CreateInput","title":"Create an input — CreateInput","text":"Create input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an input — CreateInput","text":"","code":"CreateInput(   obs = obs,   sceneName,   inputName,   inputKind,   inputSettings,   sceneItemEnabled = TRUE,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/CreateInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an input — CreateInput","text":"obs obs websocket active connection. Default obs sceneName scene input added inputName Name new input created inputKind kind input created inputSettings settings new input. missing input created default settings sceneItemEnabled Whether set created scene item enabled disabled. Default TRUE requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateInput.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create an input — CreateInput","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an input — CreateInput","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") CreateInput(obs = myobs, sceneName = \"Two cams\", inputName = \"New Browser\", inputKind = \"browser_source\") CreateInput(obs = myobs, sceneName = \"Two cams\", inputName = \"New Browser B\", inputKind = \"browser_source\", inputSettings = '{\"height\":602,\"width\":802}') disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/CreateScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new scene — CreateScene","title":"Create a new scene — CreateScene","text":"Create new scene current collection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new scene — CreateScene","text":"","code":"CreateScene(   obs = obs,   sceneName = \"New\",   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/CreateScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new scene — CreateScene","text":"obs obs websocket active connection. Default obs sceneName name scene create requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a new scene — CreateScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new scene — CreateScene","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") CreateScene(obs = myobs, sceneName = \"New Scene\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/CreateSceneCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new scene collection — CreateSceneCollection","title":"Create a new scene collection — CreateSceneCollection","text":"Create new scene collection switch can directly store new scenes","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateSceneCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new scene collection — CreateSceneCollection","text":"","code":"CreateSceneCollection(   obs = obs,   sceneCollectionName = \"New Collection\",   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/CreateSceneCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new scene collection — CreateSceneCollection","text":"obs obs websocket active connection. Default obs sceneCollectionName Name new scene collection. Default \"New Collection\" requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateSceneCollection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a new scene collection — CreateSceneCollection","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateSceneCollection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new scene collection — CreateSceneCollection","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") CreateSceneCollection(obs = myobs, sceneCollectionName=\"NewCollectionName\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentPreviewScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Asks for the name of the current preview scene — GetCurrentPreviewScene","title":"Asks for the name of the current preview scene — GetCurrentPreviewScene","text":"Get name current preview scene using existing connection OBS","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentPreviewScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asks for the name of the current preview scene — GetCurrentPreviewScene","text":"","code":"GetCurrentPreviewScene(   obs = obs,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentPreviewScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asks for the name of the current preview scene — GetCurrentPreviewScene","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentPreviewScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Asks for the name of the current preview scene — GetCurrentPreviewScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentPreviewScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asks for the name of the current preview scene — GetCurrentPreviewScene","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetCurrentPreviewScene(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentProgramScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Asks for the name of the current program scene — GetCurrentProgramScene","title":"Asks for the name of the current program scene — GetCurrentProgramScene","text":"Get name current program scene using existing connection OBS","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentProgramScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asks for the name of the current program scene — GetCurrentProgramScene","text":"","code":"GetCurrentProgramScene(   obs = obs,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentProgramScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asks for the name of the current program scene — GetCurrentProgramScene","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentProgramScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Asks for the name of the current program scene — GetCurrentProgramScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentProgramScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asks for the name of the current program scene — GetCurrentProgramScene","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetCurrentProgramScene(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetGroupList.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the list of all groups — GetGroupList","title":"Gets the list of all groups — GetGroupList","text":"Gets list groups OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetGroupList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the list of all groups — GetGroupList","text":"","code":"GetGroupList(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/GetGroupList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the list of all groups — GetGroupList","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetGroupList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the list of all groups — GetGroupList","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetGroupList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the list of all groups — GetGroupList","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetGroupList(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioBalance.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the audio balance of an input — GetInputAudioBalance","title":"Gets the audio balance of an input — GetInputAudioBalance","text":"Gets audio balance input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioBalance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the audio balance of an input — GetInputAudioBalance","text":"","code":"GetInputAudioBalance(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioBalance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the audio balance of an input — GetInputAudioBalance","text":"obs obs websocket active connection. Default obs inputName Name new input get settings requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioBalance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the audio balance of an input — GetInputAudioBalance","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioBalance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the audio balance of an input — GetInputAudioBalance","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetInputAudioBalance(obs = myobs, inputName = \"Audio 1\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioMonitorType.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the audio monitor type of an input — GetInputAudioMonitorType","title":"Gets the audio monitor type of an input — GetInputAudioMonitorType","text":"Gets audio monitor type input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioMonitorType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the audio monitor type of an input — GetInputAudioMonitorType","text":"","code":"GetInputAudioMonitorType(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioMonitorType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the audio monitor type of an input — GetInputAudioMonitorType","text":"obs obs websocket active connection. Default obs inputName Name new input get settings requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioMonitorType.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the audio monitor type of an input — GetInputAudioMonitorType","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioMonitorType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the audio monitor type of an input — GetInputAudioMonitorType","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetInputAudioMonitorType(obs = myobs, inputName = \"Audio 1\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioSyncOffset.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the audio sync offset of an input — GetInputAudioSyncOffset","title":"Gets the audio sync offset of an input — GetInputAudioSyncOffset","text":"Gets audio sync offset input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioSyncOffset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the audio sync offset of an input — GetInputAudioSyncOffset","text":"","code":"GetInputAudioSyncOffset(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioSyncOffset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the audio sync offset of an input — GetInputAudioSyncOffset","text":"obs obs websocket active connection. Default obs inputName Name new input get settings requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioSyncOffset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the audio sync offset of an input — GetInputAudioSyncOffset","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioSyncOffset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the audio sync offset of an input — GetInputAudioSyncOffset","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetInputAudioSyncOffset(obs = myobs, inputName = \"Audio 1\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioTracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the enable state of all audio tracks of an input — GetInputAudioTracks","title":"Gets the enable state of all audio tracks of an input — GetInputAudioTracks","text":"Gets enable state audio tracks input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioTracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the enable state of all audio tracks of an input — GetInputAudioTracks","text":"","code":"GetInputAudioTracks(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioTracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the enable state of all audio tracks of an input — GetInputAudioTracks","text":"obs obs websocket active connection. Default obs inputName Name new input get settings requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioTracks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the enable state of all audio tracks of an input — GetInputAudioTracks","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputAudioTracks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the enable state of all audio tracks of an input — GetInputAudioTracks","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetInputAudioTracks(obs = myobs, inputName = \"Audio 1\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputDefaultSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the default settings for an input kind — GetInputDefaultSettings","title":"Gets the default settings for an input kind — GetInputDefaultSettings","text":"Gets default settings input kind OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputDefaultSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the default settings for an input kind — GetInputDefaultSettings","text":"","code":"GetInputDefaultSettings(   obs = obs,   inputKind,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputDefaultSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the default settings for an input kind — GetInputDefaultSettings","text":"obs obs websocket active connection. Default obs inputKind Input kind get default settings requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputDefaultSettings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the default settings for an input kind — GetInputDefaultSettings","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputDefaultSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the default settings for an input kind — GetInputDefaultSettings","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetInputDefaultSettings(obs = myobs, inputKind = \"browser_source\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputKindList.html","id":null,"dir":"Reference","previous_headings":"","what":"ask for a list of the input kinds — GetInputKindList","title":"ask for a list of the input kinds — GetInputKindList","text":"Get list input kinds OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputKindList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ask for a list of the input kinds — GetInputKindList","text":"","code":"GetInputKindList(   obs = obs,   unversioned = FALSE,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputKindList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ask for a list of the input kinds — GetInputKindList","text":"obs obs websocket active connection. Default obs unversioned True: Return kinds unversioned, False: Return version suffixes requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputKindList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ask for a list of the input kinds — GetInputKindList","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputKindList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ask for a list of the input kinds — GetInputKindList","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetInputKindList(obs = myobs) GetInputKindList(obs = myobs, unversioned = TRUE) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputList.html","id":null,"dir":"Reference","previous_headings":"","what":"ask for a list of the inputs — GetInputList","title":"ask for a list of the inputs — GetInputList","text":"Get list inputs OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ask for a list of the inputs — GetInputList","text":"","code":"GetInputList(   obs = obs,   inputKind = NULL,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ask for a list of the inputs — GetInputList","text":"obs obs websocket active connection. Default obs inputKind Restrict array inputs specified kind requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ask for a list of the inputs — GetInputList","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ask for a list of the inputs — GetInputList","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetInputList(obs = myobs) GetInputList(obs = myobs, inputKind = \"browser_source\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputMute.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the mute state of an input — GetInputMute","title":"Get the mute state of an input — GetInputMute","text":"Get mute state input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputMute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the mute state of an input — GetInputMute","text":"","code":"GetInputMute(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputMute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the mute state of an input — GetInputMute","text":"obs obs websocket active connection. Default obs inputName Name new input get settings requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputMute.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the mute state of an input — GetInputMute","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputMute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the mute state of an input — GetInputMute","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetInputMute(obs = myobs, inputName = \"Audio 1\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputPropertiesListPropertyItems.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the items of a list property for an input — GetInputPropertiesListPropertyItems","title":"Gets the items of a list property for an input — GetInputPropertiesListPropertyItems","text":"Gets items list property input OBS using existing connection OBS. example get list available display display capture monitor_id list.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputPropertiesListPropertyItems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the items of a list property for an input — GetInputPropertiesListPropertyItems","text":"","code":"GetInputPropertiesListPropertyItems(   obs = obs,   inputName,   propertyName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputPropertiesListPropertyItems.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the items of a list property for an input — GetInputPropertiesListPropertyItems","text":"obs obs websocket active connection. Default obs inputName Name input propertyName name property get list items . requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputPropertiesListPropertyItems.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the items of a list property for an input — GetInputPropertiesListPropertyItems","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputPropertiesListPropertyItems.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the items of a list property for an input — GetInputPropertiesListPropertyItems","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetInputPropertiesListPropertyItems(obs = myobs, inputName = \"Display Capture 1\", propertyName = \"monitor_id\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the settings of an input — GetInputSettings","title":"Gets the settings of an input — GetInputSettings","text":"Gets settings input OBS using existing connection OBS. include defaul settings. (Defaults provided GetInputDefaultSettings)","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the settings of an input — GetInputSettings","text":"","code":"GetInputSettings(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the settings of an input — GetInputSettings","text":"obs obs websocket active connection. Default obs inputName Name new input get settings requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputSettings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the settings of an input — GetInputSettings","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the settings of an input — GetInputSettings","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetInputSettings(obs = myobs, inputName = \"New Browser\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputVolume.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the volume of an input — GetInputVolume","title":"Gets the volume of an input — GetInputVolume","text":"Gets volume input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputVolume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the volume of an input — GetInputVolume","text":"","code":"GetInputVolume(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetInputVolume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the volume of an input — GetInputVolume","text":"obs obs websocket active connection. Default obs inputName Name new input get settings requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputVolume.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the volume of an input — GetInputVolume","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetInputVolume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the volume of an input — GetInputVolume","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetInputVolume(obs = myobs, inputName = \"Audio 1\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetMonitorList.html","id":null,"dir":"Reference","previous_headings":"","what":"Ask for the monitor List — GetMonitorList","title":"Ask for the monitor List — GetMonitorList","text":"Gets monitor list using existing connection OBS","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetMonitorList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ask for the monitor List — GetMonitorList","text":"","code":"GetMonitorList(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/GetMonitorList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ask for the monitor List — GetMonitorList","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetMonitorList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ask for the monitor List — GetMonitorList","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetMonitorList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ask for the monitor List — GetMonitorList","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetMonitorList(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetRecordStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the record of the stream output — GetRecordStatus","title":"Gets the record of the stream output — GetRecordStatus","text":"Gets record stream output OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetRecordStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the record of the stream output — GetRecordStatus","text":"","code":"GetRecordStatus(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/GetRecordStatus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the record of the stream output — GetRecordStatus","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetRecordStatus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the record of the stream output — GetRecordStatus","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetRecordStatus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the record of the stream output — GetRecordStatus","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetRecordStatus(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneCollectionList.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the list of all the scene collections — GetSceneCollectionList","title":"Get the list of all the scene collections — GetSceneCollectionList","text":"Get list scene collections (use ViewLog() get access list)","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneCollectionList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the list of all the scene collections — GetSceneCollectionList","text":"","code":"GetSceneCollectionList(   obs = obs,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneCollectionList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the list of all the scene collections — GetSceneCollectionList","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneCollectionList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the list of all the scene collections — GetSceneCollectionList","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneCollectionList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the list of all the scene collections — GetSceneCollectionList","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetSceneCollectionList(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneItemList.html","id":null,"dir":"Reference","previous_headings":"","what":"ask for a list of the items — GetSceneItemList","title":"ask for a list of the items — GetSceneItemList","text":"Changes Scene current program using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneItemList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ask for a list of the items — GetSceneItemList","text":"","code":"GetSceneItemList(   obs = obs,   sceneName = \"main\",   verbose = TRUE,   requestId = uuid::UUIDgenerate() )"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneItemList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ask for a list of the items — GetSceneItemList","text":"obs obs websocket active connection. Default obs sceneName name scene switch (must exist obs) verbose messages outputs TRUE. Default: TRUE requestId requestId used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneItemList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ask for a list of the items — GetSceneItemList","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneItemList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ask for a list of the items — GetSceneItemList","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetSceneItemList(obs = myobs, sceneName = \"BRB\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneList.html","id":null,"dir":"Reference","previous_headings":"","what":"ask for a list of the scenes — GetSceneList","title":"ask for a list of the scenes — GetSceneList","text":"Get list scenes OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ask for a list of the scenes — GetSceneList","text":"","code":"GetSceneList(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ask for a list of the scenes — GetSceneList","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ask for a list of the scenes — GetSceneList","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ask for a list of the scenes — GetSceneList","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetSceneList(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneSceneTransitionOverride.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the scene ","title":"Gets the scene ","text":"Gets scene \"transition override\" scene. OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneSceneTransitionOverride.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the scene ","text":"","code":"GetSceneSceneTransitionOverride(   obs = obs,   sceneName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneSceneTransitionOverride.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the scene ","text":"obs obs websocket active connection. Default obs sceneName name scene (must exist obs) requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneSceneTransitionOverride.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the scene ","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneSceneTransitionOverride.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the scene ","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetSceneSceneTransitionOverride(obs = myobs, scene = \"Muti Cam Scene\" ) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetSpecialInputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Ask for a list of the special inputs — GetSpecialInputs","title":"Ask for a list of the special inputs — GetSpecialInputs","text":"Get list special inputs OBS using existing connection OBS. (Desktop audio, mic...)","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSpecialInputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ask for a list of the special inputs — GetSpecialInputs","text":"","code":"GetSpecialInputs(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/GetSpecialInputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ask for a list of the special inputs — GetSpecialInputs","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSpecialInputs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ask for a list of the special inputs — GetSpecialInputs","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSpecialInputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ask for a list of the special inputs — GetSpecialInputs","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetSpecialInputs(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetStreamStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the status of the stream output — GetStreamStatus","title":"Gets the status of the stream output — GetStreamStatus","text":"Gets status stream output OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetStreamStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the status of the stream output — GetStreamStatus","text":"","code":"GetStreamStatus(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/GetStreamStatus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the status of the stream output — GetStreamStatus","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetStreamStatus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the status of the stream output — GetStreamStatus","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetStreamStatus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the status of the stream output — GetStreamStatus","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetStreamStatus(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/GetStudioModeEnabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Asks whether studio mode is enabled. — GetStudioModeEnabled","title":"Asks whether studio mode is enabled. — GetStudioModeEnabled","text":"Gets whether studio mode enabled OBS using existing connection OBS","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetStudioModeEnabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asks whether studio mode is enabled. — GetStudioModeEnabled","text":"","code":"GetStudioModeEnabled(   obs = obs,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetStudioModeEnabled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asks whether studio mode is enabled. — GetStudioModeEnabled","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetStudioModeEnabled.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Asks whether studio mode is enabled. — GetStudioModeEnabled","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetStudioModeEnabled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asks whether studio mode is enabled. — GetStudioModeEnabled","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetStudioModeEnabled(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":null,"dir":"Reference","previous_headings":"","what":"R OBS Websocket Class — OBSWebSocket","title":"R OBS Websocket Class — OBSWebSocket","text":"Create websocket client connect OBS send commands. WebSocket server (Use \"Tools\" menu OBS) must activated.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R OBS Websocket Class — OBSWebSocket","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R OBS Websocket Class — OBSWebSocket","text":"websocket::WebSocket -> OBSWebSocket","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R OBS Websocket Class — OBSWebSocket","text":"obsWebSocketVersion Used store OBS websocket version server challenge Used store challenge sent OBS websocket connection used identification salt Used store salt sent OBS websocket connection used identification outlog Used store requests responses OBS websocket server","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R OBS Websocket Class — OBSWebSocket","text":"websocket::WebSocket$clearAccessLogChannels() websocket::WebSocket$clearErrorLogChannels() websocket::WebSocket$close() websocket::WebSocket$connect() websocket::WebSocket$initialize() websocket::WebSocket$onClose() websocket::WebSocket$onError() websocket::WebSocket$onMessage() websocket::WebSocket$onOpen() websocket::WebSocket$protocol() websocket::WebSocket$readyState() websocket::WebSocket$send() websocket::WebSocket$setAccessLogChannels() websocket::WebSocket$setErrorLogChannels()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R OBS Websocket Class — OBSWebSocket","text":"OBSWebSocket$clone()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R OBS Websocket Class — OBSWebSocket","text":"objects class cloneable method.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R OBS Websocket Class — OBSWebSocket","text":"","code":"OBSWebSocket$clone(deep = FALSE)"},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R OBS Websocket Class — OBSWebSocket","text":"deep Whether make deep clone.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R OBS Websocket Class — OBSWebSocket","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputFiltersDialog.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the input filters properties dialog box — OpenInputFiltersDialog","title":"Open the input filters properties dialog box — OpenInputFiltersDialog","text":"Open input filters properties dialog box using existing connection OBS (Audio Capture, Video Capture ...)","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputFiltersDialog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the input filters properties dialog box — OpenInputFiltersDialog","text":"","code":"OpenInputFiltersDialog(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputFiltersDialog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open the input filters properties dialog box — OpenInputFiltersDialog","text":"obs obs websocket active connection. Default obs inputName Name input open filters dialog requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputFiltersDialog.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Open the input filters properties dialog box — OpenInputFiltersDialog","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputFiltersDialog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open the input filters properties dialog box — OpenInputFiltersDialog","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") OpenInputFiltersDialog(obs = myobs, inputName = \"Audio Capture 1\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputInteractDialog.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the input interact Dialog box — OpenInputInteractDialog","title":"Open the input interact Dialog box — OpenInputInteractDialog","text":"Open input interact dialog box using existing connection OBS (Use browser ...)","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputInteractDialog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the input interact Dialog box — OpenInputInteractDialog","text":"","code":"OpenInputInteractDialog(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputInteractDialog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open the input interact Dialog box — OpenInputInteractDialog","text":"obs obs websocket active connection. Default obs inputName Name input open filters dialog requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputInteractDialog.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Open the input interact Dialog box — OpenInputInteractDialog","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputInteractDialog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open the input interact Dialog box — OpenInputInteractDialog","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") OpenInputInteractDialog(obs = myobs, inputName = \"Audio Capture 1\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputPropertiesDialog.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the input properties dialog box — OpenInputPropertiesDialog","title":"Open the input properties dialog box — OpenInputPropertiesDialog","text":"Open input properties dialog box using existing connection OBS (Audio Capture, Video Capture ...)","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputPropertiesDialog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the input properties dialog box — OpenInputPropertiesDialog","text":"","code":"OpenInputPropertiesDialog(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputPropertiesDialog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open the input properties dialog box — OpenInputPropertiesDialog","text":"obs obs websocket active connection. Default obs inputName Name input open dialog requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputPropertiesDialog.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Open the input properties dialog box — OpenInputPropertiesDialog","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OpenInputPropertiesDialog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open the input properties dialog box — OpenInputPropertiesDialog","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") OpenInputPropertiesDialog(obs = myobs, inputName = \"Audio Capture 1\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/PauseRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Pause the record of the stream output — PauseRecord","title":"Pause the record of the stream output — PauseRecord","text":"Pause record stream output OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/PauseRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pause the record of the stream output — PauseRecord","text":"","code":"PauseRecord(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/PauseRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pause the record of the stream output — PauseRecord","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/PauseRecord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pause the record of the stream output — PauseRecord","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/PauseRecord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pause the record of the stream output — PauseRecord","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") PauseRecord(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/PressInputPropertiesButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Press a button in the properties of an input — PressInputPropertiesButton","title":"Press a button in the properties of an input — PressInputPropertiesButton","text":"Press button properties input OBS using existing connection OBS. example refresh browser input, use \"refreshnocache\".","code":""},{"path":"https://franklentz.github.io/onRobs/reference/PressInputPropertiesButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Press a button in the properties of an input — PressInputPropertiesButton","text":"","code":"PressInputPropertiesButton(   obs = obs,   inputName,   propertyName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/PressInputPropertiesButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Press a button in the properties of an input — PressInputPropertiesButton","text":"obs obs websocket active connection. Default obs inputName Name input propertyName name button property press    . requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/PressInputPropertiesButton.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Press a button in the properties of an input — PressInputPropertiesButton","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/PressInputPropertiesButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Press a button in the properties of an input — PressInputPropertiesButton","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") PressInputPropertiesButton(obs = myobs, inputName = \"BrowserA\", propertyName = \"refreshnocache\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/RemoveInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove an input — RemoveInput","title":"Remove an input — RemoveInput","text":"Remove input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/RemoveInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove an input — RemoveInput","text":"","code":"RemoveInput(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/RemoveInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove an input — RemoveInput","text":"obs obs websocket active connection. Default obs inputName Name new input removed requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/RemoveInput.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove an input — RemoveInput","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/RemoveInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove an input — RemoveInput","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") RemoveInput(obs = myobs, inputName = \"New Browser\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/RemoveScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a Scene from OBS — RemoveScene","title":"Remove a Scene from OBS — RemoveScene","text":"Remove Scene OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/RemoveScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a Scene from OBS — RemoveScene","text":"","code":"RemoveScene(   obs = obs,   sceneName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/RemoveScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a Scene from OBS — RemoveScene","text":"obs obs websocket active connection. Default obs sceneName name scene remove (must exist obs) requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/RemoveScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove a Scene from OBS — RemoveScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/RemoveScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a Scene from OBS — RemoveScene","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") RemoveScene(obs = myobs, sceneName = \"Muti Cam Scene\") RemoveScene(obs = myobs, sceneName = \"BRB\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/ResumeRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Resume the record of the stream output — ResumeRecord","title":"Resume the record of the stream output — ResumeRecord","text":"Resume record stream output OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ResumeRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resume the record of the stream output — ResumeRecord","text":"","code":"ResumeRecord(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/ResumeRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resume the record of the stream output — ResumeRecord","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ResumeRecord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Resume the record of the stream output — ResumeRecord","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ResumeRecord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resume the record of the stream output — ResumeRecord","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") ResumeRecord(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SendStreamCaption.html","id":null,"dir":"Reference","previous_headings":"","what":"Sends CEA-608 caption text over the stream output — SendStreamCaption","title":"Sends CEA-608 caption text over the stream output — SendStreamCaption","text":"Sends CEA-608 caption text stream output using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SendStreamCaption.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sends CEA-608 caption text over the stream output — SendStreamCaption","text":"","code":"SendStreamCaption(   obs = obs,   captionText = \"Test Caption\",   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SendStreamCaption.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sends CEA-608 caption text over the stream output — SendStreamCaption","text":"obs obs websocket active connection. Default obs captionText text caption requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SendStreamCaption.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sends CEA-608 caption text over the stream output — SendStreamCaption","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SendStreamCaption.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sends CEA-608 caption text over the stream output — SendStreamCaption","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SendStreamCaption(obs = myobs, captionText=\"My caption\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentPreviewScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Changes the Scene of the current preview — SetCurrentPreviewScene","title":"Changes the Scene of the current preview — SetCurrentPreviewScene","text":"Changes Scene current preview using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentPreviewScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changes the Scene of the current preview — SetCurrentPreviewScene","text":"","code":"SetCurrentPreviewScene(   obs = obs,   sceneName = \"main\",   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentPreviewScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changes the Scene of the current preview — SetCurrentPreviewScene","text":"obs obs websocket active connection. Default obs sceneName name scene switch (must exist obs) requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentPreviewScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Changes the Scene of the current preview — SetCurrentPreviewScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentPreviewScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Changes the Scene of the current preview — SetCurrentPreviewScene","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetCurrentPreviewScene(obs = myobs, sceneName = \"Muti Cam Scene\") SetCurrentPreviewScene(obs = myobs, sceneName = \"BRB\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentProgramScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Changes the Scene of the current program — SetCurrentProgramScene","title":"Changes the Scene of the current program — SetCurrentProgramScene","text":"Changes Scene current program using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentProgramScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changes the Scene of the current program — SetCurrentProgramScene","text":"","code":"SetCurrentProgramScene(   obs = obs,   sceneName = \"main\",   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentProgramScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changes the Scene of the current program — SetCurrentProgramScene","text":"obs obs websocket active connection. Default obs sceneName name scene switch (must exist obs) requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentProgramScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Changes the Scene of the current program — SetCurrentProgramScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentProgramScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Changes the Scene of the current program — SetCurrentProgramScene","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetCurrentProgramScene(obs = myobs, sceneName = \"Muti Cam Scene\") SetCurrentProgramScene(obs = myobs, sceneName = \"BRB\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentSceneCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch the current scene collection — SetCurrentSceneCollection","title":"Switch the current scene collection — SetCurrentSceneCollection","text":"Switches specified scene collection.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentSceneCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch the current scene collection — SetCurrentSceneCollection","text":"","code":"SetCurrentSceneCollection(   obs = obs,   sceneCollectionName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentSceneCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch the current scene collection — SetCurrentSceneCollection","text":"obs obs websocket active connection. Default obs sceneCollectionName Name scene collection switch . requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentSceneCollection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Switch the current scene collection — SetCurrentSceneCollection","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentSceneCollection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch the current scene collection — SetCurrentSceneCollection","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetCurrentSceneCollection(obs = myobs, sceneCollectionName=\"Main\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioBalance.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the audio balance of an input — SetInputAudioBalance","title":"Set the audio balance of an input — SetInputAudioBalance","text":"Set audio balance input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioBalance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the audio balance of an input — SetInputAudioBalance","text":"","code":"SetInputAudioBalance(   obs = obs,   inputName,   inputAudioBalance = NULL,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioBalance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the audio balance of an input — SetInputAudioBalance","text":"obs obs websocket active connection. Default obs inputName Name input change volume inputAudioBalance inputAudioBalance setting 0 1 requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioBalance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the audio balance of an input — SetInputAudioBalance","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioBalance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the audio balance of an input — SetInputAudioBalance","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetInputAudioBalance(obs = myobs, inputName = \"Audio 2\", inputAudioBalance = 0.5) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioMonitorType.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the audio monitor type of an input — SetInputAudioMonitorType","title":"Change the audio monitor type of an input — SetInputAudioMonitorType","text":"Change Change audio monitor type input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioMonitorType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the audio monitor type of an input — SetInputAudioMonitorType","text":"","code":"SetInputAudioMonitorType(   obs = obs,   inputName,   monitorType,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioMonitorType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the audio monitor type of an input — SetInputAudioMonitorType","text":"obs obs websocket active connection. Default obs inputName name input monitorType new monitorType input (OBS_MONITORING_TYPE_NONE, OBS_MONITORING_TYPE_MONITOR_ONLY,OBS_MONITORING_TYPE_MONITOR_AND_OUTPUT requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioMonitorType.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Change the audio monitor type of an input — SetInputAudioMonitorType","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioMonitorType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the audio monitor type of an input — SetInputAudioMonitorType","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetInputAudioMonitorType(obs = myobs, inputName = \"Audio 1\", monitorType = \"OBS_MONITORING_TYPE_MONITOR_ONLY\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioSyncOffset.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the audio balance of an input — SetInputAudioSyncOffset","title":"Set the audio balance of an input — SetInputAudioSyncOffset","text":"Set audio balance input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioSyncOffset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the audio balance of an input — SetInputAudioSyncOffset","text":"","code":"SetInputAudioSyncOffset(   obs = obs,   inputName,   inputAudioSyncOffset = 0,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioSyncOffset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the audio balance of an input — SetInputAudioSyncOffset","text":"obs obs websocket active connection. Default obs inputName Name input change volume inputAudioSyncOffset inputAudioBalance setting -950 2000 requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioSyncOffset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the audio balance of an input — SetInputAudioSyncOffset","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioSyncOffset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the audio balance of an input — SetInputAudioSyncOffset","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetInputAudioSyncOffset(obs = myobs, inputName = \"Audio 2\", inputAudioSyncOffset = 1000) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioTracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the settings of audio tracks for an input — SetInputAudioTracks","title":"Sets the settings of audio tracks for an input — SetInputAudioTracks","text":"Sets settings audio tracks input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioTracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the settings of audio tracks for an input — SetInputAudioTracks","text":"","code":"SetInputAudioTracks(   obs = obs,   inputName,   inputAudioTracks,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioTracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the settings of audio tracks for an input — SetInputAudioTracks","text":"obs obs websocket active connection. Default obs inputName Name input inputAudioTracks settings Audio Tracks. requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioTracks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sets the settings of audio tracks for an input — SetInputAudioTracks","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputAudioTracks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the settings of audio tracks for an input — SetInputAudioTracks","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetInputAudioTracks(obs = myobs, inputName = \"Audio 1\", inputAudioTracks = '{\"1\":true,\"2\":true,\"3\":true}') disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputMute.html","id":null,"dir":"Reference","previous_headings":"","what":"Mute or unmute an input — SetInputMute","title":"Mute or unmute an input — SetInputMute","text":"Sets audio mute state input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputMute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mute or unmute an input — SetInputMute","text":"","code":"SetInputMute(   obs = obs,   inputName,   inputMuted = TRUE,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputMute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mute or unmute an input — SetInputMute","text":"obs obs websocket active connection. Default obs inputName Name new input muted unmuted inputMuted Whether mute input . Default TRUE requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputMute.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mute or unmute an input — SetInputMute","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputMute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mute or unmute an input — SetInputMute","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetInputMute(obs = myobs, inputName = \"Audio 2\", inputMuted = FALSE) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputName.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the name of an input — SetInputName","title":"Change the name of an input — SetInputName","text":"Change name input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the name of an input — SetInputName","text":"","code":"SetInputName(   obs = obs,   inputName,   newInputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the name of an input — SetInputName","text":"obs obs websocket active connection. Default obs inputName name new input changed newInputName new name input requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Change the name of an input — SetInputName","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the name of an input — SetInputName","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetInputName(obs = myobs, inputName = \"New Browser\", newInputName = \"Main Browser\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the settings of an input — SetInputSettings","title":"Sets the settings of an input — SetInputSettings","text":"Sets settings input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the settings of an input — SetInputSettings","text":"","code":"SetInputSettings(   obs = obs,   inputName,   inputSettings,   overlay = TRUE,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the settings of an input — SetInputSettings","text":"obs obs websocket active connection. Default obs inputName Name new input created inputSettings settings new input. missing input created default settings overlay Apply settings top existing ones TRUE reset input defaults applying settings FALSE. Default TRUE requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputSettings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sets the settings of an input — SetInputSettings","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the settings of an input — SetInputSettings","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetInputSettings(obs = myobs, inputName = \"New Browser\", inputsSettings = '{\"height\":602,\"width\":802}') disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputVolume.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the volume of an input — SetInputVolume","title":"Set the volume of an input — SetInputVolume","text":"Set volume input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputVolume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the volume of an input — SetInputVolume","text":"","code":"SetInputVolume(   obs = obs,   inputName,   inputVolumeMul = NULL,   inputVolumeDb = NULL,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetInputVolume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the volume of an input — SetInputVolume","text":"obs obs websocket active connection. Default obs inputName Name input change volume inputVolumeMul Volume setting mul 0 20 inputVolumeDb Volume setting dB -100 26 requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputVolume.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the volume of an input — SetInputVolume","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetInputVolume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the volume of an input — SetInputVolume","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetInputVolume(obs = myobs, inputName = \"Audio 2\", inputVolumeMul = 10) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneName.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the name of a scene (rename). — SetSceneName","title":"Sets the name of a scene (rename). — SetSceneName","text":"Sets name scene (rename) OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the name of a scene (rename). — SetSceneName","text":"","code":"SetSceneName(   obs = obs,   sceneName,   newSceneName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the name of a scene (rename). — SetSceneName","text":"obs obs websocket active connection. Default obs sceneName name scene set name (must exist obs) newSceneName new name scene set name requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sets the name of a scene (rename). — SetSceneName","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the name of a scene (rename). — SetSceneName","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetSceneName(obs = myobs, sceneName = \"Muti Cam Scene\", newSceneName = \"SC MultiCam\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneSceneTransitionOverride.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the scene ","title":"Sets the scene ","text":"Sets scene \"transition override\" scene OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneSceneTransitionOverride.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the scene ","text":"","code":"SetSceneSceneTransitionOverride(   obs = obs,   sceneName,   transitionName,   transitionDuration = 300,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneSceneTransitionOverride.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the scene ","text":"obs obs websocket active connection. Default obs sceneName name scene (must exist obs) transitionName Name scene transition use override. Specify null remove transitionDuration Duration use overridden transition. Specify null remove. number >= 50, <= 20000. requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneSceneTransitionOverride.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sets the scene ","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneSceneTransitionOverride.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the scene ","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetSceneSceneTransitionOverride(obs = myobs,                                 sceneName = \"Muti Cam Scene\",                                 transitionName = \"a name\",                                 transitionDuration = 500) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/SetStudioModeEnabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Activate or desactivate the studio mode — SetStudioModeEnabled","title":"Activate or desactivate the studio mode — SetStudioModeEnabled","text":"Set whether studio mode enabled OBS using existing connection OBS","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetStudioModeEnabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Activate or desactivate the studio mode — SetStudioModeEnabled","text":"","code":"SetStudioModeEnabled(   obs = obs,   studioModeEnabled = TRUE,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetStudioModeEnabled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activate or desactivate the studio mode — SetStudioModeEnabled","text":"obs obs websocket active connection. Default obs studioModeEnabled TRUE (enabled) FALSE (disabled). Default: TRUE requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetStudioModeEnabled.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Activate or desactivate the studio mode — SetStudioModeEnabled","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetStudioModeEnabled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Activate or desactivate the studio mode — SetStudioModeEnabled","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") SetStudioModeEnabled(obs = myobs, studioModeEnabled = TRUE) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/StartRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Start the record of the stream output — StartRecord","title":"Start the record of the stream output — StartRecord","text":"Start record stream output OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StartRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start the record of the stream output — StartRecord","text":"","code":"StartRecord(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/StartRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start the record of the stream output — StartRecord","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StartRecord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Start the record of the stream output — StartRecord","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StartRecord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start the record of the stream output — StartRecord","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") StartRecord(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/StartStream.html","id":null,"dir":"Reference","previous_headings":"","what":"Start the stream output — StartStream","title":"Start the stream output — StartStream","text":"Start stream output OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StartStream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start the stream output — StartStream","text":"","code":"StartStream(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/StartStream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start the stream output — StartStream","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StartStream.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Start the stream output — StartStream","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StartStream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start the stream output — StartStream","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") StartStream(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/StopRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop the record of the stream output — StopRecord","title":"Stop the record of the stream output — StopRecord","text":"Stop record stream output OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StopRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop the record of the stream output — StopRecord","text":"","code":"StopRecord(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/StopRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop the record of the stream output — StopRecord","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StopRecord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stop the record of the stream output — StopRecord","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StopRecord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop the record of the stream output — StopRecord","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") StopRecord(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/StopStream.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop the stream output — StopStream","title":"Stop the stream output — StopStream","text":"Stop stream output OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StopStream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop the stream output — StopStream","text":"","code":"StopStream(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/StopStream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop the stream output — StopStream","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StopStream.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stop the stream output — StopStream","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/StopStream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop the stream output — StopStream","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") StopStream(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/ToggleInputMute.html","id":null,"dir":"Reference","previous_headings":"","what":"Mute or Unmute an input — ToggleInputMute","title":"Mute or Unmute an input — ToggleInputMute","text":"Mute Unmute input OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleInputMute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mute or Unmute an input — ToggleInputMute","text":"","code":"ToggleInputMute(   obs = obs,   inputName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/ToggleInputMute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mute or Unmute an input — ToggleInputMute","text":"obs obs websocket active connection. Default obs inputName Name new input get settings requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleInputMute.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mute or Unmute an input — ToggleInputMute","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleInputMute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mute or Unmute an input — ToggleInputMute","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") ToggleInputMute(obs = myobs, inputName = \"Audio 1\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/ToggleRecord.html","id":null,"dir":"Reference","previous_headings":"","what":"Toggle the record of the stream output — ToggleRecord","title":"Toggle the record of the stream output — ToggleRecord","text":"Toggle record stream output OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleRecord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toggle the record of the stream output — ToggleRecord","text":"","code":"ToggleRecord(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/ToggleRecord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Toggle the record of the stream output — ToggleRecord","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleRecord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Toggle the record of the stream output — ToggleRecord","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleRecord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toggle the record of the stream output — ToggleRecord","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") ToggleRecord(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/ToggleRecordPause.html","id":null,"dir":"Reference","previous_headings":"","what":"Toggles pause on the record of the stream output — ToggleRecordPause","title":"Toggles pause on the record of the stream output — ToggleRecordPause","text":"Toggles pause record stream output OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleRecordPause.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toggles pause on the record of the stream output — ToggleRecordPause","text":"","code":"ToggleRecordPause(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/ToggleRecordPause.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Toggles pause on the record of the stream output — ToggleRecordPause","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleRecordPause.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Toggles pause on the record of the stream output — ToggleRecordPause","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleRecordPause.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toggles pause on the record of the stream output — ToggleRecordPause","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") ToggleRecordPause(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/ToggleStream.html","id":null,"dir":"Reference","previous_headings":"","what":"Toggle the status of the stream output — ToggleStream","title":"Toggle the status of the stream output — ToggleStream","text":"Toggle status stream output OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleStream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toggle the status of the stream output — ToggleStream","text":"","code":"ToggleStream(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/ToggleStream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Toggle the status of the stream output — ToggleStream","text":"obs obs websocket active connection. Default obs requestId requestId used provide feedback. Default UUIDgenerate() verbose messages outputs TRUE. Default: TRUE","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleStream.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Toggle the status of the stream output — ToggleStream","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ToggleStream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toggle the status of the stream output — ToggleStream","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") ToggleStream(obs = myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/ViewLog.html","id":null,"dir":"Reference","previous_headings":"","what":"View the log of requests and the responses — ViewLog","title":"View the log of requests and the responses — ViewLog","text":"Use access values returned requests","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ViewLog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View the log of requests and the responses — ViewLog","text":"","code":"ViewLog(obs)"},{"path":"https://franklentz.github.io/onRobs/reference/ViewLog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View the log of requests and the responses — ViewLog","text":"obs OBSwebsocket object","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ViewLog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View the log of requests and the responses — ViewLog","text":"data frame status request returned values","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ViewLog.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"View the log of requests and the responses — ViewLog","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/ViewLog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View the log of requests and the responses — ViewLog","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") GetSceneSceneTransitionOverride(obs = myobs, scene = \"Muti Cam Scene\" ) ViewLog(myobs) disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/connectToOBS.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the R OBS Websocket object — connectToOBS","title":"Create the R OBS Websocket object — connectToOBS","text":"Use OBSWebsocket object create connection OBS Websocket server WebSocket server (Use \"Tools\" menu OBS) must activated.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/connectToOBS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the R OBS Websocket object — connectToOBS","text":"","code":"connectToOBS(obs)"},{"path":"https://franklentz.github.io/onRobs/reference/connectToOBS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the R OBS Websocket object — connectToOBS","text":"obs OBSwebsocket object","code":""},{"path":"https://franklentz.github.io/onRobs/reference/connectToOBS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create the R OBS Websocket object — connectToOBS","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/connectToOBS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the R OBS Websocket object — connectToOBS","text":"","code":"if (FALSE) {  myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/createOBSWebsocket.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the R OBS Websocket object — createOBSWebsocket","title":"Create the R OBS Websocket object — createOBSWebsocket","text":"Create websocket object connect OBS send commands. WebSocket server (Use \"Tools\" menu OBS) must activated.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/createOBSWebsocket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the R OBS Websocket object — createOBSWebsocket","text":"","code":"createOBSWebsocket(address = \"ws://127.0.0.1\", port = 4455)"},{"path":"https://franklentz.github.io/onRobs/reference/createOBSWebsocket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the R OBS Websocket object — createOBSWebsocket","text":"address Address connect OBS websocket server (ws:// added provided) Default :127.0.0.1 port Port used connection. Default 4455","code":""},{"path":"https://franklentz.github.io/onRobs/reference/createOBSWebsocket.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create the R OBS Websocket object — createOBSWebsocket","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/createOBSWebsocket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the R OBS Websocket object — createOBSWebsocket","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/disconnectFromOBS.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the R OBS Websocket object — disconnectFromOBS","title":"Create the R OBS Websocket object — disconnectFromOBS","text":"disconnect OBS websocket server","code":""},{"path":"https://franklentz.github.io/onRobs/reference/disconnectFromOBS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the R OBS Websocket object — disconnectFromOBS","text":"","code":"disconnectFromOBS(obs = obs)"},{"path":"https://franklentz.github.io/onRobs/reference/disconnectFromOBS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the R OBS Websocket object — disconnectFromOBS","text":"obs OBSwebsocket object","code":""},{"path":"https://franklentz.github.io/onRobs/reference/disconnectFromOBS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create the R OBS Websocket object — disconnectFromOBS","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/disconnectFromOBS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the R OBS Websocket object — disconnectFromOBS","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/identifyToOBS.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the R OBS Websocket object — identifyToOBS","title":"Create the R OBS Websocket object — identifyToOBS","text":"Use OBSWebsocket object already connected connectToOBS() OBS Websocket server identify client authentication OBS websocket server activated, password must provided WebSocket server (Use \"Tools\" menu OBS) must activated.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/identifyToOBS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the R OBS Websocket object — identifyToOBS","text":"","code":"identifyToOBS(obs = obs, password, eventSub = \"33\")"},{"path":"https://franklentz.github.io/onRobs/reference/identifyToOBS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the R OBS Websocket object — identifyToOBS","text":"obs OBSwebsocket object password password OBS websocket server authentication activated (strongly advisable) eventSub Default 33","code":""},{"path":"https://franklentz.github.io/onRobs/reference/identifyToOBS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create the R OBS Websocket object — identifyToOBS","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/identifyToOBS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the R OBS Websocket object — identifyToOBS","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/reference/onRobs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"onRobs: R client for obs-websocket — onRobs-package","title":"onRobs: R client for obs-websocket — onRobs-package","text":"onRobs uses OBS Websockets control OBS R learn onRobs, start vignettes: `browseVignettes(package = \"onRobs\")`","code":""},{"path":[]},{"path":"https://franklentz.github.io/onRobs/reference/parseById.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the ID of a request response to parse the response data — parseById","title":"Use the ID of a request response to parse the response data — parseById","text":"Get function display response message server return request id function use request id extract parse response data log robs websocket object yet fully functional","code":""},{"path":"https://franklentz.github.io/onRobs/reference/parseById.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the ID of a request response to parse the response data — parseById","text":"","code":"parseById(obs = obs, requestId)"},{"path":"https://franklentz.github.io/onRobs/reference/parseById.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the ID of a request response to parse the response data — parseById","text":"obs obs websocket active connection. Default obs requestId requestId get data","code":""},{"path":"https://franklentz.github.io/onRobs/reference/parseById.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the ID of a request response to parse the response data — parseById","text":"According request type corresponding id : boolean, integer, string dataframe","code":""},{"path":"https://franklentz.github.io/onRobs/reference/parseById.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use the ID of a request response to parse the response data — parseById","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/parseById.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use the ID of a request response to parse the response data — parseById","text":"","code":"if (FALSE) { myobs <- createOBSWebsocket() connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\")  disconnectFromOBS(myobs) }"},{"path":"https://franklentz.github.io/onRobs/news/index.html","id":"onrobs-010","dir":"Changelog","previous_headings":"","what":"onRobs 0.1.0","title":"onRobs 0.1.0","text":"Dev.","code":""}]
