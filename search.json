[{"path":"https://franklentz.github.io/onRobs/articles/onRobs.html","id":"obs-websocket-server-in-obs","dir":"Articles","previous_headings":"","what":"OBS Websocket Server in OBS","title":"onRobs","text":"OBS must running (package tested version 29) need start websockets server. find websocket server Tools > Websockets server Settings Make sure","code":""},{"path":"https://franklentz.github.io/onRobs/articles/onRobs.html","id":"connection-and-identification","dir":"Articles","previous_headings":"","what":"Connection and Identification","title":"onRobs","text":"three steps start interacting OBS Webserver running Create OBSWebsocket (object use interact OBS websockets server Establish connection server Identify authenticate. authentication activated OBS Websockets server, need supply password","code":"library(onRobs) myobs <- createOBSWebsocket()  connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"myObsWebsocketsServerPassword\")"},{"path":"https://franklentz.github.io/onRobs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"FML. Maintainer.","code":""},{"path":"https://franklentz.github.io/onRobs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"FML (2023). onRobs: R client obs-websocket. https://github.com/franklentz/onRobs, https://franklentz.github.io/onRobs/.","code":"@Manual{,   title = {onRobs: R client for obs-websocket},   author = {{FML}},   year = {2023},   note = {https://github.com/franklentz/onRobs, https://franklentz.github.io/onRobs/}, }"},{"path":"https://franklentz.github.io/onRobs/index.html","id":"onrobs","dir":"","previous_headings":"","what":"R client for obs-websocket","title":"R client for obs-websocket","text":"package enables control OBS OBS Websockets Server. strongly rely websocket package.","code":""},{"path":"https://franklentz.github.io/onRobs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R client for obs-websocket","text":"can install development version onRobs GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"franklentz/onRobs\")"},{"path":"https://franklentz.github.io/onRobs/index.html","id":"obs-websocket-server-in-obs","dir":"","previous_headings":"Installation","what":"OBS Websocket Server in OBS","title":"R client for obs-websocket","text":"OBS must running (package tested version 29) need start websockets server. find websocket server Tools > Websockets server Settings Make sure","code":""},{"path":"https://franklentz.github.io/onRobs/index.html","id":"connection-and-identification","dir":"","previous_headings":"Installation","what":"Connection and Identification","title":"R client for obs-websocket","text":"three steps start interacting OBS Webserver running Create OBSWebsocket (object use interact OBS websockets server Establish connection server Identify authenticate. authentication activated OBS Websockets server, need supply password","code":"library(onRobs) myobs <- createOBSWebsocket()  connectToOBS(obs = myobs) identifyToOBS(obs = myobs, eventSub = \"33\", password = \"myObsWebsocketsServerPassword\")"},{"path":"https://franklentz.github.io/onRobs/reference/CreateScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new scene — CreateScene","title":"Create a new scene — CreateScene","text":"Create new scene current collection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new scene — CreateScene","text":"","code":"CreateScene(   obs = obs,   sceneName = \"New\",   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/CreateScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new scene — CreateScene","text":"sceneName name scene switch create","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a new scene — CreateScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/CreateScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new scene — CreateScene","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state CreateScene(obs = myobs, sceneName = \"New Scene\") #>  #>           { #>           \"op\": 6, #>           \"d\": { #>                   \"requestType\": \"CreateScene\",\"requestId\": \"f1144063-106e-49f6-93f0-2571a3640c5f\",\"requestData\": { #>     \"sceneName\": \"New Scene\" #>   }} #>                 } #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentPreviewScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Asks for the name of the current preview scene — GetCurrentPreviewScene","title":"Asks for the name of the current preview scene — GetCurrentPreviewScene","text":"Get name current preview scene using existing connection OBS","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentPreviewScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asks for the name of the current preview scene — GetCurrentPreviewScene","text":"","code":"GetCurrentPreviewScene(   obs = obs,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentPreviewScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asks for the name of the current preview scene — GetCurrentPreviewScene","text":"obs obs websocket active connection. Default obs requestID requestID used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentPreviewScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Asks for the name of the current preview scene — GetCurrentPreviewScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentPreviewScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asks for the name of the current preview scene — GetCurrentPreviewScene","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state GetCurrentPreviewScene(obs = myobs) #>  #>            { #>     \"op\": 6, #>     \"d\": { #>       \"requestType\": \"GetCurrentPreviewScene\",\"requestId\": \"ea3fba9b-82fd-4309-833f-66130a0d2f52\"}} #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentProgramScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Asks for the name of the current program scene — GetCurrentProgramScene","title":"Asks for the name of the current program scene — GetCurrentProgramScene","text":"Get name current program scene using existing connection OBS","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentProgramScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asks for the name of the current program scene — GetCurrentProgramScene","text":"","code":"GetCurrentProgramScene(   obs = obs,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentProgramScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asks for the name of the current program scene — GetCurrentProgramScene","text":"obs obs websocket active connection. Default obs requestID requestID used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentProgramScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Asks for the name of the current program scene — GetCurrentProgramScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetCurrentProgramScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asks for the name of the current program scene — GetCurrentProgramScene","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state GetCurrentProgramScene(obs = myobs) #>  #>            { #>     \"op\": 6, #>     \"d\": { #>       \"requestType\": \"GetCurrentProgramScene\",\"requestId\": \"be44df63-336f-4414-89d5-2cb75f38adbb\"}} #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/GetGroupList.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the list of all groups — GetGroupList","title":"Gets the list of all groups — GetGroupList","text":"Gets list groups OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetGroupList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the list of all groups — GetGroupList","text":"","code":"GetGroupList(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/GetGroupList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the list of all groups — GetGroupList","text":"obs obs websocket active connection. Default obs requestID requestID used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetGroupList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the list of all groups — GetGroupList","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetGroupList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the list of all groups — GetGroupList","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state GetGroupList(obs = myobs) #>  #>            { #>     \"op\": 6, #>     \"d\": { #>       \"requestType\": \"GetGroupList\",\"requestId\": \"e2efd8fc-1944-4698-839c-8b2464656828\"}} #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneItemList.html","id":null,"dir":"Reference","previous_headings":"","what":"ask for a list of the items — GetSceneItemList","title":"ask for a list of the items — GetSceneItemList","text":"Changes Scene current program using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneItemList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ask for a list of the items — GetSceneItemList","text":"","code":"GetSceneItemList(   obs = obs,   sceneName = \"main\",   verbose = TRUE,   requestId = uuid::UUIDgenerate() )"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneItemList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ask for a list of the items — GetSceneItemList","text":"obs obs websocket active connection. Default obs sceneName name scene switch (must exist obs) requestID requestID used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneItemList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ask for a list of the items — GetSceneItemList","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneItemList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ask for a list of the items — GetSceneItemList","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state GetSceneItemList(obs = myobs, sceneName = \"BRB\") #>  #>           { #>           \"op\": 6, #>           \"d\": { #>                   \"requestType\": \"GetSceneItemList\",\"requestId\": \"595b3339-f2ed-4412-a9af-c0a912048ef2\",\"requestData\": { #>     \"sceneName\": \"BRB\" #>   }} #>                 } #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneList.html","id":null,"dir":"Reference","previous_headings":"","what":"ask for a list of the scenes — GetSceneList","title":"ask for a list of the scenes — GetSceneList","text":"Get list scenes OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ask for a list of the scenes — GetSceneList","text":"","code":"GetSceneList(obs = obs, requestId = uuid::UUIDgenerate(), verbose = TRUE)"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ask for a list of the scenes — GetSceneList","text":"obs obs websocket active connection. Default obs requestID requestID used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ask for a list of the scenes — GetSceneList","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ask for a list of the scenes — GetSceneList","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state GetSceneList(obs = myobs) #>  #>            { #>     \"op\": 6, #>     \"d\": { #>       \"requestType\": \"GetSceneList\",\"requestId\": \"3d035961-9c67-4ce8-b475-d201156c1af2\"}} #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneSceneTransitionOverride.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the scene ","title":"Gets the scene ","text":"Gets scene \"transition override\" scene. OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneSceneTransitionOverride.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the scene ","text":"","code":"GetSceneSceneTransitionOverride(   obs = obs,   sceneName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneSceneTransitionOverride.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the scene ","text":"obs obs websocket active connection. Default obs sceneName name scene (must exist obs) transitionName Name scene transition use override. Specify null remove transitionDuration Duration use overridden transition. Specify null remove. >= 50, <= 20000. requestID requestID used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneSceneTransitionOverride.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the scene ","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/GetSceneSceneTransitionOverride.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the scene ","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state GetSceneSceneTransitionOverride(obs = myobs, scene = \"Muti Cam Scene\" ) #>  #>           { #>           \"op\": 6, #>           \"d\": { #>                   \"requestType\": \"GetSceneSceneTransitionOverride\",\"requestId\": \"0cb0ac51-a5ae-4aed-ac3b-a90579b4bfc1\",\"requestData\": {\"sceneName\": \"Muti Cam Scene\"}} #>                 } #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":null,"dir":"Reference","previous_headings":"","what":"R OBS Websocket Class — OBSWebSocket","title":"R OBS Websocket Class — OBSWebSocket","text":"Create websocket client connect OBS send commands. WebSocket server (Use \"Tools\" menu OBS) must activated.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R OBS Websocket Class — OBSWebSocket","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R OBS Websocket Class — OBSWebSocket","text":"websocket::WebSocket -> OBSWebSocket","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R OBS Websocket Class — OBSWebSocket","text":"obsWebSocketVersion Used store OBS websocket version server challenge Used store challenge sent OBS websocket connection used identification salt Used store salt sent OBS websocket connection used identification outlog Used store requests responses OBS websocket server","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R OBS Websocket Class — OBSWebSocket","text":"websocket::WebSocket$clearAccessLogChannels() websocket::WebSocket$clearErrorLogChannels() websocket::WebSocket$close() websocket::WebSocket$connect() websocket::WebSocket$initialize() websocket::WebSocket$onClose() websocket::WebSocket$onError() websocket::WebSocket$onMessage() websocket::WebSocket$onOpen() websocket::WebSocket$protocol() websocket::WebSocket$readyState() websocket::WebSocket$send() websocket::WebSocket$setAccessLogChannels() websocket::WebSocket$setErrorLogChannels()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R OBS Websocket Class — OBSWebSocket","text":"OBSWebSocket$clone()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R OBS Websocket Class — OBSWebSocket","text":"objects class cloneable method.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R OBS Websocket Class — OBSWebSocket","text":"","code":"OBSWebSocket$clone(deep = FALSE)"},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R OBS Websocket Class — OBSWebSocket","text":"deep Whether make deep clone.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/OBSWebSocket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R OBS Websocket Class — OBSWebSocket","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/RemoveScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a Scene from OBS — RemoveScene","title":"Remove a Scene from OBS — RemoveScene","text":"Remove Scene OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/RemoveScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a Scene from OBS — RemoveScene","text":"","code":"RemoveScene(   obs = obs,   sceneName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/RemoveScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a Scene from OBS — RemoveScene","text":"obs obs websocket active connection. Default obs sceneName name scene remove (must exist obs) requestID requestID used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/RemoveScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove a Scene from OBS — RemoveScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/RemoveScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a Scene from OBS — RemoveScene","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state RemoveScene(obs = myobs, sceneName = \"Muti Cam Scene\") #>  #>           { #>           \"op\": 6, #>           \"d\": { #>                   \"requestType\": \"RemoveScene\",\"requestId\": \"16333d33-8a17-441a-9a1e-73eea80ee1ff\",\"requestData\": { #>     \"sceneName\": \"Muti Cam Scene\" #>   }} #>                 } #> Error: invalid state RemoveScene(obs = myobs, sceneName = \"BRB\") #>  #>           { #>           \"op\": 6, #>           \"d\": { #>                   \"requestType\": \"RemoveScene\",\"requestId\": \"04042ab7-b70d-483f-bc07-31bc4750be2d\",\"requestData\": { #>     \"sceneName\": \"BRB\" #>   }} #>                 } #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentPreviewScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Changes the Scene of the current preview — SetCurrentPreviewScene","title":"Changes the Scene of the current preview — SetCurrentPreviewScene","text":"Changes Scene current preview using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentPreviewScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changes the Scene of the current preview — SetCurrentPreviewScene","text":"","code":"SetCurrentPreviewScene(   obs = obs,   sceneName = \"main\",   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentPreviewScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changes the Scene of the current preview — SetCurrentPreviewScene","text":"obs obs websocket active connection. Default obs sceneName name scene switch (must exist obs) requestID requestID used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentPreviewScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Changes the Scene of the current preview — SetCurrentPreviewScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentPreviewScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Changes the Scene of the current preview — SetCurrentPreviewScene","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state SetCurrentPreviewScene(obs = myobs, sceneName = \"Muti Cam Scene\") #>  #>           { #>           \"op\": 6, #>           \"d\": { #>                   \"requestType\": \"SetCurrentPreviewScene\",\"requestId\": \"f9004f23-2bac-4080-ae43-1669d3de2d60\",\"requestData\": { #>     \"sceneName\": \"Muti Cam Scene\" #>   }} #>                 } #> Error: invalid state SetCurrentPreviewScene(obs = myobs, sceneName = \"BRB\") #>  #>           { #>           \"op\": 6, #>           \"d\": { #>                   \"requestType\": \"SetCurrentPreviewScene\",\"requestId\": \"07e955f8-cdd1-4dea-b87d-71bce42e0e39\",\"requestData\": { #>     \"sceneName\": \"BRB\" #>   }} #>                 } #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentProgramScene.html","id":null,"dir":"Reference","previous_headings":"","what":"Changes the Scene of the current program — SetCurrentProgramScene","title":"Changes the Scene of the current program — SetCurrentProgramScene","text":"Changes Scene current program using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentProgramScene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changes the Scene of the current program — SetCurrentProgramScene","text":"","code":"SetCurrentProgramScene(   obs = obs,   sceneName = \"main\",   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentProgramScene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changes the Scene of the current program — SetCurrentProgramScene","text":"obs obs websocket active connection. Default obs sceneName name scene switch (must exist obs) requestID requestID used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentProgramScene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Changes the Scene of the current program — SetCurrentProgramScene","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetCurrentProgramScene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Changes the Scene of the current program — SetCurrentProgramScene","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state SetCurrentProgramScene(obs = myobs, scene = \"Muti Cam Scene\") #>  #>           { #>           \"op\": 6, #>           \"d\": { #>                   \"requestType\": \"SetCurrentProgramScene\",\"requestId\": \"e8ed0f5c-37f2-4edd-83ba-686486be1b7d\",\"requestData\": { #>     \"sceneName\": \"Muti Cam Scene\" #>   }} #>                 } #> Error: invalid state SetCurrentProgramScene(obs = myobs, scene = \"BRB\") #>  #>           { #>           \"op\": 6, #>           \"d\": { #>                   \"requestType\": \"SetCurrentProgramScene\",\"requestId\": \"4e644bf1-32eb-4c9f-8766-c6211ab258f4\",\"requestData\": { #>     \"sceneName\": \"BRB\" #>   }} #>                 } #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneName.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the name of a scene (rename). — SetSceneName","title":"Sets the name of a scene (rename). — SetSceneName","text":"Sets name scene (rename) OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the name of a scene (rename). — SetSceneName","text":"","code":"SetSceneName(   obs = obs,   sceneName,   newSceneName,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the name of a scene (rename). — SetSceneName","text":"obs obs websocket active connection. Default obs sceneName name scene set name (must exist obs) newSceneName new name scene set name requestID requestID used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sets the name of a scene (rename). — SetSceneName","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the name of a scene (rename). — SetSceneName","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state SetSceneName(obs = myobs, scene = \"Muti Cam Scene\") #> Error in SetSceneName(obs = myobs, scene = \"Muti Cam Scene\"): argument \"newSceneName\" is missing, with no default SetSceneName(obs = myobs, scene = \"BRB\") #> Error in SetSceneName(obs = myobs, scene = \"BRB\"): argument \"newSceneName\" is missing, with no default disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneSceneTransitionOverride.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the scene ","title":"Sets the scene ","text":"Sets scene \"transition override\" scene OBS using existing connection OBS.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneSceneTransitionOverride.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the scene ","text":"","code":"SetSceneSceneTransitionOverride(   obs = obs,   sceneName,   transitionName,   transitionDuration = 300,   requestId = uuid::UUIDgenerate(),   verbose = TRUE )"},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneSceneTransitionOverride.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the scene ","text":"obs obs websocket active connection. Default obs sceneName name scene (must exist obs) transitionName Name scene transition use override. Specify null remove transitionDuration Duration use overridden transition. Specify null remove. number >= 50, <= 20000. requestID requestID used provide feedback. Default UUIDgenerate()","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneSceneTransitionOverride.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sets the scene ","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/SetSceneSceneTransitionOverride.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the scene ","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state SetSceneSceneTransitionOverride(obs = myobs, scene = \"Muti Cam Scene\", transitionName = \"a name\", transitionDuration = 500) #>  #>           { #>           \"op\": 6, #>           \"d\": { #>                   \"requestType\": \"SetSceneSceneTransitionOverride\",\"requestId\": \"a9121005-4b5b-40ab-b4d6-93b390193f4a\",\"requestData\": {\"sceneName\": \"Muti Cam Scene\", \"transitionName\": \"a name\", \"transitionDuration\": 500}} #>                 } #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/connectToOBS.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the R OBS Websocket object — connectToOBS","title":"Create the R OBS Websocket object — connectToOBS","text":"Use OBSWebsocket object create connection OBS Websocket server WebSocket server (Use \"Tools\" menu OBS) must activated.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/connectToOBS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the R OBS Websocket object — connectToOBS","text":"","code":"connectToOBS(obs)"},{"path":"https://franklentz.github.io/onRobs/reference/connectToOBS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the R OBS Websocket object — connectToOBS","text":"obs OBSwebsocket object","code":""},{"path":"https://franklentz.github.io/onRobs/reference/connectToOBS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create the R OBS Websocket object — connectToOBS","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/connectToOBS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the R OBS Websocket object — connectToOBS","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/createOBSWebsocket.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the R OBS Websocket object — createOBSWebsocket","title":"Create the R OBS Websocket object — createOBSWebsocket","text":"Create websocket object connect OBS send commands. WebSocket server (Use \"Tools\" menu OBS) must activated.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/createOBSWebsocket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the R OBS Websocket object — createOBSWebsocket","text":"","code":"createOBSWebsocket(address = \"ws://127.0.0.1\", port = 4455)"},{"path":"https://franklentz.github.io/onRobs/reference/createOBSWebsocket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the R OBS Websocket object — createOBSWebsocket","text":"address Address connect OBS websocket server (ws:// added provided) Default :127.0.0.1 port Port used connection. Default 4455","code":""},{"path":"https://franklentz.github.io/onRobs/reference/createOBSWebsocket.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create the R OBS Websocket object — createOBSWebsocket","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/createOBSWebsocket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the R OBS Websocket object — createOBSWebsocket","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/disconnectFromOBS.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the R OBS Websocket object — disconnectFromOBS","title":"Create the R OBS Websocket object — disconnectFromOBS","text":"disconnect OBS websocket server","code":""},{"path":"https://franklentz.github.io/onRobs/reference/disconnectFromOBS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the R OBS Websocket object — disconnectFromOBS","text":"","code":"disconnectFromOBS(obs = obs)"},{"path":"https://franklentz.github.io/onRobs/reference/disconnectFromOBS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the R OBS Websocket object — disconnectFromOBS","text":"obs OBSwebsocket object","code":""},{"path":"https://franklentz.github.io/onRobs/reference/disconnectFromOBS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create the R OBS Websocket object — disconnectFromOBS","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/disconnectFromOBS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the R OBS Websocket object — disconnectFromOBS","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/identifyToOBS.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the R OBS Websocket object — identifyToOBS","title":"Create the R OBS Websocket object — identifyToOBS","text":"Use OBSWebsocket object already connected connectToOBS() OBS Websocket server identify client authentication OBS websocket server activated, password must provided WebSocket server (Use \"Tools\" menu OBS) must activated.","code":""},{"path":"https://franklentz.github.io/onRobs/reference/identifyToOBS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the R OBS Websocket object — identifyToOBS","text":"","code":"identifyToOBS(obs = obs, password, eventSub = \"33\")"},{"path":"https://franklentz.github.io/onRobs/reference/identifyToOBS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the R OBS Websocket object — identifyToOBS","text":"obs OBSwebsocket object password password OBS websocket server authentication activated (strongly advisable) eventSub Default 33","code":""},{"path":"https://franklentz.github.io/onRobs/reference/identifyToOBS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create the R OBS Websocket object — identifyToOBS","text":"FML","code":""},{"path":"https://franklentz.github.io/onRobs/reference/identifyToOBS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the R OBS Websocket object — identifyToOBS","text":"","code":"myobs <- createOBSWebsocket() #> ws://127.0.0.1:4455 connectToOBS(obs = myobs) #> <OBSWebSocket> #>   Inherits from: <WebSocket> #>   Public: #>     challenge: NULL #>     clearAccessLogChannels: function (channels = c(\"all\"))  #>     clearErrorLogChannels: function (channels = c(\"all\"))  #>     clone: function (deep = FALSE)  #>     close: function (code = 1000L, reason = \"\")  #>     connect: function ()  #>     initialize: function (url, protocols = character(0), headers = NULL, autoConnect = TRUE,  #>     obsWebSocketVersion: Unknown #>     onClose: function (callback)  #>     onError: function (callback)  #>     onMessage: function (callback)  #>     onOpen: function (callback)  #>     outlog: data.frame #>     protocol: function ()  #>     readyState: function ()  #>     salt: NULL #>     send: function (msg)  #>     setAccessLogChannels: function (channels = c(\"all\"))  #>     setErrorLogChannels: function (channels = c(\"all\"))  #>   Private: #>     accessLogChannelValues: none connect disconnect control frame_header frame_paylo ... #>     accessLogChannels: function (channels, stompValue)  #>     callbacks: environment #>     errorLogChannelValues: none devel library info warn rerror fatal all #>     errorLogChannels: function (channels, stompValue)  #>     getInvoker: function (eventName)  #>     pendingConnect: FALSE #>     wsObj: externalptr identifyToOBS(obs = myobs, eventSub = \"33\", password = \"OBSwebsocketServerPassword\") #> Error: invalid state disconnectFromOBS(myobs)"},{"path":"https://franklentz.github.io/onRobs/reference/onRobs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"onRobs: R client for obs-websocket — onRobs-package","title":"onRobs: R client for obs-websocket — onRobs-package","text":"onRobs uses OBS Websockets control OBS R learn onRobs, start vignettes: `browseVignettes(package = \"onRobs\")`","code":""},{"path":[]},{"path":"https://franklentz.github.io/onRobs/news/index.html","id":"onrobs-010","dir":"Changelog","previous_headings":"","what":"onRobs 0.1.0","title":"onRobs 0.1.0","text":"Dev.","code":""}]
